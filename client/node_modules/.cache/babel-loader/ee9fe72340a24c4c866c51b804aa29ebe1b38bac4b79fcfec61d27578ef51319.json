{"ast":null,"code":"import { API_URL } from \"../config\";\n\n// selectors\nexport const getAllRewards = state => state.rewards;\nexport const getRewardById = (_ref, rewardId) => {\n  let {\n    rewards\n  } = _ref;\n  return rewards.find(reward => reward.id === rewardId);\n};\n\n// actions\nconst createActionName = actionName => `app/rewards/${actionName}`;\nconst UPDATE_REWARDS = createActionName('UPDATE_REWARDS');\n\n// action creators\nexport const updateRewards = payload => ({\n  type: UPDATE_REWARDS,\n  payload\n});\n// requests\nexport const fetchRewards = () => {\n  return dispatch => {\n    fetch(`${API_URL}/rewards`).then(res => res.json()).then(rewards => dispatch(updateRewards(rewards)));\n  };\n};\n\n// subreducer\nconst rewardsReducer = function () {\n  let statePart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case UPDATE_REWARDS:\n      return [...action.payload];\n    default:\n      return statePart;\n  }\n  ;\n};\nexport default rewardsReducer;","map":{"version":3,"names":["API_URL","getAllRewards","state","rewards","getRewardById","_ref","rewardId","find","reward","id","createActionName","actionName","UPDATE_REWARDS","updateRewards","payload","type","fetchRewards","dispatch","fetch","then","res","json","rewardsReducer","statePart","arguments","length","undefined","action"],"sources":["/home/jerzy/Documents/david/react-rewards-app/src/redux/rewardsRedux.js"],"sourcesContent":["import { API_URL } from \"../config\";\n\n// selectors\nexport const getAllRewards = state => state.rewards;\nexport const getRewardById = ({rewards}, rewardId) => rewards.find(reward => reward.id === rewardId);\n\n// actions\nconst createActionName = actionName => `app/rewards/${actionName}`;\nconst UPDATE_REWARDS = createActionName('UPDATE_REWARDS');\n\n// action creators\nexport const updateRewards = payload => ({ type: UPDATE_REWARDS, payload });\n// requests\nexport const fetchRewards = () => {\n  return (dispatch) => {\n    fetch(`${API_URL}/rewards`)\n      .then(res => res.json())\n      .then(rewards => dispatch(updateRewards(rewards)));\n  }\n};\n\n// subreducer\nconst rewardsReducer = (statePart = [], action) => {\n  switch (action.type) {\n    case UPDATE_REWARDS:\n      return [ ...action.payload];\n    default:\n      return statePart;\n  };\n};\n\nexport default rewardsReducer;"],"mappings":"AAAA,SAASA,OAAO,QAAQ,WAAW;;AAEnC;AACA,OAAO,MAAMC,aAAa,GAAGC,KAAK,IAAIA,KAAK,CAACC,OAAO;AACnD,OAAO,MAAMC,aAAa,GAAGA,CAAAC,IAAA,EAAYC,QAAQ;EAAA,IAAnB;IAACH;EAAO,CAAC,GAAAE,IAAA;EAAA,OAAeF,OAAO,CAACI,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,EAAE,KAAKH,QAAQ,CAAC;AAAA;;AAEpG;AACA,MAAMI,gBAAgB,GAAGC,UAAU,IAAK,eAAcA,UAAW,EAAC;AAClE,MAAMC,cAAc,GAAGF,gBAAgB,CAAC,gBAAgB,CAAC;;AAEzD;AACA,OAAO,MAAMG,aAAa,GAAGC,OAAO,KAAK;EAAEC,IAAI,EAAEH,cAAc;EAAEE;AAAQ,CAAC,CAAC;AAC3E;AACA,OAAO,MAAME,YAAY,GAAGA,CAAA,KAAM;EAChC,OAAQC,QAAQ,IAAK;IACnBC,KAAK,CAAE,GAAElB,OAAQ,UAAS,CAAC,CACxBmB,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAAChB,OAAO,IAAIc,QAAQ,CAACJ,aAAa,CAACV,OAAO,CAAC,CAAC,CAAC;EACtD,CAAC;AACH,CAAC;;AAED;AACA,MAAMmB,cAAc,GAAG,SAAAA,CAAA,EAA4B;EAAA,IAA3BC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEG,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC5C,QAAQC,MAAM,CAACZ,IAAI;IACjB,KAAKH,cAAc;MACjB,OAAO,CAAE,GAAGe,MAAM,CAACb,OAAO,CAAC;IAC7B;MACE,OAAOS,SAAS;EACpB;EAAC;AACH,CAAC;AAED,eAAeD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}